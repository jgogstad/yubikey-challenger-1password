<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>428</string>
	<key>AMApplicationVersion</key>
	<string>2.7</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on unlock_vault(pin)	set masterpass to my challenge(pin)		if masterpass is not equal to false then		if my is_closed() then my toggle_mini()		tell application "System Events" to tell process "1Password mini"			keystroke masterpass			keystroke return		end tell	end ifend unlock_vaulton is_locked()	tell application "System Events" to tell process "1Password 7"		set unlock_button to a reference to (first button where its accessibility description = "Unlock using Master Password") of window 1		if unlock_button exists then			return true		else			return false		end if	end tellend is_lockedon is_closed()	tell application "System Events" to tell process "1Password 7"		if (window 1) exists then			return false		else			return true		end if	end tellend is_closedon toggle_mini()	tell application "System Events"		keystroke "\\" using {command down, option down}	end tellend toggle_minion challenge(chal)	set ykcmd to "/usr/local/bin/ykchalresp -1 " &amp; chal	delay 0.1 -- take some time before continuing	try		set master to (do shell script ykcmd)	on error number error_number		if error_number = 1 then			my connection_error("Problem communicating with Yubikey. Maybe it is unplugged, not set in the HMAC-SHA1-mode or you choose the wrong slot.")			return false		end if	end try	return masterend challengeon icon()	return (path to resource "AutomatorApplet.icns")end iconon pin_handler()	tell application "Alfred 3"		activate		set yubikeyIcon to my icon()		try			set dg to display dialog ¬				¬					"Please enter your Yubikey challenge PIN to proceed with the authentication:" with title "Yubikey challenge" buttons {"Cancel", "OK"} ¬				default button "OK" default answer ¬				"" with icon yubikeyIcon with hidden answer			activate dg			set pin to text returned of dg			if pin is not equal to "" then my unlock_vault(pin)		on error number -128			return false		end try	end tellend pin_handleron accessibility_error()	set msg to "YKC1P got an error: Access for assistive devices is disabled. 	Please and try again after activating the YKC1P in System Preferences &gt; Security &amp; Privacy &gt; Accessibility."	display alert msg as critical	return falseend accessibility_erroron connection_error(message)	set msg to "YKC1P got the following error: " &amp; message	display alert msg as critical	return falseend connection_erroron run {}	try		if my is_closed() then my toggle_mini() -- open it if closed		if my is_locked() then -- we must close it again for the pin dialog to appear			my toggle_mini()			my pin_handler()		end if	on error number error_number		if error_number = -25211 then			my accessibility_error()		else			set msg to "Error " &amp; error_number			display alert msg as critical		end if		return false	end tryend run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>F94A1034-8532-4A4C-9F0E-38CD60465166</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>7755B805-E400-48DD-B793-4954A3AFF837</string>
				<key>UUID</key>
				<string>5D830F16-051B-43A8-BF66-E01F01B50BFE</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>837.000000:860.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
